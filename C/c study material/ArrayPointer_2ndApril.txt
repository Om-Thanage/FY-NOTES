// program 1
main( ) 
{ 
 int i = 3, *x ; 
 float j = 1.5, *y ; 
 char k = 'c', *z ; 
 printf ( "\nValue of i = %d", i ) ; 
 printf ( "\nValue of j = %f", j ) ; 
 printf ( "\nValue of k = %c", k ) ; 
 x = &i ; 
 y = &j ; 
 z = &k ; 
 printf ( "\nOriginal address in x = %u", x ) ; 
 printf ( "\nOriginal address in y = %u", y ) ; 
 printf ( "\nOriginal address in z = %u", z ) ; 
 x++ ; 
 y++ ; 
 z++ ; 
 printf ( "\nNew address in x = %u", x ) ; 
 printf ( "\nNew address in y = %u", y ) ; 
 printf ( "\nNew address in z = %u", z ) ; 
}

//2 Addition of a number to a pointer.
int i = 4;
int *j, *k ; 
j = &i ; 
printf("%x \ n",  j);  59685

j = j + 1 ;
printf("%x \ n",  j);   59689   
j = j + 9 ;
printf(j); 
k = j + 3 ; 
printf(j, k, &i, i);



//3 Subtraction of a number from a pointer.
int i = 4, *j, *k ; 
j = &i ; 
j = j - 2 ; 
j = j - 5 ; 
k = j - 6 ; 

//4 Subtraction of one pointer from another.

main( ) 
{ 
 int arr[ ] = { 10, 20, 30, 45, 67, 56, 74 } ; 
 int *i, *j ; 
 i = &arr[1] ; 
 j = &arr[5] ; 
 printf ( "%d %d", j - i, *j - *i ) ; 
}

//5 

main( ) 
{ 
 int arr[ ] = { 10, 20, 36, 72, 45, 36 } ; 
 int *j, *k ; 
 j = &arr [ 4 ] ; 
printf(j);

printf(arr);

 k = ( arr + 4 ) ;

printf(k);
 
 if ( j == k ) 
 printf ( "The two pointers point to the same location" ) ; 
 else 
 printf ( "The two pointers do not point to the same location" ) ; 
}

//  pointer and array 
int num[ ] = { 24, 34, 12, 44, 56, 17 } ;
 
We also know that on mentioning the name of the array we get its 
base address. Thus, by saying *num we would be able to refer to 
the zeroth element of the array, that is, 24.
 One can easily see that 
*num and *( num + 0 ) both refer to 24. 
Similarly, by saying *( num + 1 ) we can refer the first element of 
the array, that is, 34. In fact, this is what the C compiler does 
internally. When we say, num[i], the C compiler internally 
converts it to *( num + i ). This means that all the following 
notations are same: 
num[i] 
*( num + i ) 
*( i + num ) 
i[num]  

// 2D array .... ppt reference

main( ) 
{ 
 int s[4][2] = { 
 { 1234, 56 }, 
 { 1212, 33 }, 
 { 1434, 80 }, 
 { 1312, 78 } 
 } ; 
 int i ; 
 for ( i = 0 ; i <= 3 ; i++ ) 
 printf ( "\nAddress of %d th 1-D array = %u", i, s[i] ) ; 
}

output
Address of 0 th 1-D array = 65508 
Address of 1 th 1-D array = 65512 
Address of 2 th 1-D array = 65516 
Address of 3 th 1-D array = 65520

